// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: core/api/tcp.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TCPCallerClient is the client API for TCPCaller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TCPCallerClient interface {
	TCPCall(ctx context.Context, opts ...grpc.CallOption) (TCPCaller_TCPCallClient, error)
}

type tCPCallerClient struct {
	cc grpc.ClientConnInterface
}

func NewTCPCallerClient(cc grpc.ClientConnInterface) TCPCallerClient {
	return &tCPCallerClient{cc}
}

func (c *tCPCallerClient) TCPCall(ctx context.Context, opts ...grpc.CallOption) (TCPCaller_TCPCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &TCPCaller_ServiceDesc.Streams[0], "/api.TCPCaller/TCPCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &tCPCallerTCPCallClient{stream}
	return x, nil
}

type TCPCaller_TCPCallClient interface {
	Send(*SockRequest) error
	Recv() (*SockData, error)
	grpc.ClientStream
}

type tCPCallerTCPCallClient struct {
	grpc.ClientStream
}

func (x *tCPCallerTCPCallClient) Send(m *SockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tCPCallerTCPCallClient) Recv() (*SockData, error) {
	m := new(SockData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TCPCallerServer is the server API for TCPCaller service.
// All implementations must embed UnimplementedTCPCallerServer
// for forward compatibility
type TCPCallerServer interface {
	TCPCall(TCPCaller_TCPCallServer) error
	mustEmbedUnimplementedTCPCallerServer()
}

// UnimplementedTCPCallerServer must be embedded to have forward compatible implementations.
type UnimplementedTCPCallerServer struct {
}

func (UnimplementedTCPCallerServer) TCPCall(TCPCaller_TCPCallServer) error {
	return status.Errorf(codes.Unimplemented, "method TCPCall not implemented")
}
func (UnimplementedTCPCallerServer) mustEmbedUnimplementedTCPCallerServer() {}

// UnsafeTCPCallerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TCPCallerServer will
// result in compilation errors.
type UnsafeTCPCallerServer interface {
	mustEmbedUnimplementedTCPCallerServer()
}

func RegisterTCPCallerServer(s grpc.ServiceRegistrar, srv TCPCallerServer) {
	s.RegisterService(&TCPCaller_ServiceDesc, srv)
}

func _TCPCaller_TCPCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TCPCallerServer).TCPCall(&tCPCallerTCPCallServer{stream})
}

type TCPCaller_TCPCallServer interface {
	Send(*SockData) error
	Recv() (*SockRequest, error)
	grpc.ServerStream
}

type tCPCallerTCPCallServer struct {
	grpc.ServerStream
}

func (x *tCPCallerTCPCallServer) Send(m *SockData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tCPCallerTCPCallServer) Recv() (*SockRequest, error) {
	m := new(SockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TCPCaller_ServiceDesc is the grpc.ServiceDesc for TCPCaller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TCPCaller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TCPCaller",
	HandlerType: (*TCPCallerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TCPCall",
			Handler:       _TCPCaller_TCPCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/api/tcp.proto",
}
