// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: core/api/http.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HTTPCallerClient is the client API for HTTPCaller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPCallerClient interface {
	HTTPCall(ctx context.Context, opts ...grpc.CallOption) (HTTPCaller_HTTPCallClient, error)
}

type hTTPCallerClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPCallerClient(cc grpc.ClientConnInterface) HTTPCallerClient {
	return &hTTPCallerClient{cc}
}

func (c *hTTPCallerClient) HTTPCall(ctx context.Context, opts ...grpc.CallOption) (HTTPCaller_HTTPCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &HTTPCaller_ServiceDesc.Streams[0], "/api.HTTPCaller/HTTPCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &hTTPCallerHTTPCallClient{stream}
	return x, nil
}

type HTTPCaller_HTTPCallClient interface {
	Send(*HTTPRequest) error
	Recv() (*HTTPResponse, error)
	grpc.ClientStream
}

type hTTPCallerHTTPCallClient struct {
	grpc.ClientStream
}

func (x *hTTPCallerHTTPCallClient) Send(m *HTTPRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hTTPCallerHTTPCallClient) Recv() (*HTTPResponse, error) {
	m := new(HTTPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HTTPCallerServer is the server API for HTTPCaller service.
// All implementations must embed UnimplementedHTTPCallerServer
// for forward compatibility
type HTTPCallerServer interface {
	HTTPCall(HTTPCaller_HTTPCallServer) error
	mustEmbedUnimplementedHTTPCallerServer()
}

// UnimplementedHTTPCallerServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPCallerServer struct {
}

func (UnimplementedHTTPCallerServer) HTTPCall(HTTPCaller_HTTPCallServer) error {
	return status.Errorf(codes.Unimplemented, "method HTTPCall not implemented")
}
func (UnimplementedHTTPCallerServer) mustEmbedUnimplementedHTTPCallerServer() {}

// UnsafeHTTPCallerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPCallerServer will
// result in compilation errors.
type UnsafeHTTPCallerServer interface {
	mustEmbedUnimplementedHTTPCallerServer()
}

func RegisterHTTPCallerServer(s grpc.ServiceRegistrar, srv HTTPCallerServer) {
	s.RegisterService(&HTTPCaller_ServiceDesc, srv)
}

func _HTTPCaller_HTTPCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HTTPCallerServer).HTTPCall(&hTTPCallerHTTPCallServer{stream})
}

type HTTPCaller_HTTPCallServer interface {
	Send(*HTTPResponse) error
	Recv() (*HTTPRequest, error)
	grpc.ServerStream
}

type hTTPCallerHTTPCallServer struct {
	grpc.ServerStream
}

func (x *hTTPCallerHTTPCallServer) Send(m *HTTPResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hTTPCallerHTTPCallServer) Recv() (*HTTPRequest, error) {
	m := new(HTTPRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HTTPCaller_ServiceDesc is the grpc.ServiceDesc for HTTPCaller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPCaller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.HTTPCaller",
	HandlerType: (*HTTPCallerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HTTPCall",
			Handler:       _HTTPCaller_HTTPCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/api/http.proto",
}
