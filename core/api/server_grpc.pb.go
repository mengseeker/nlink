// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: core/api/server.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyClient interface {
	HTTPCall(ctx context.Context, opts ...grpc.CallOption) (Proxy_HTTPCallClient, error)
	TCPCall(ctx context.Context, opts ...grpc.CallOption) (Proxy_TCPCallClient, error)
}

type proxyClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyClient(cc grpc.ClientConnInterface) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) HTTPCall(ctx context.Context, opts ...grpc.CallOption) (Proxy_HTTPCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[0], "/api.Proxy/HTTPCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyHTTPCallClient{stream}
	return x, nil
}

type Proxy_HTTPCallClient interface {
	Send(*HTTPRequest) error
	Recv() (*HTTPResponse, error)
	grpc.ClientStream
}

type proxyHTTPCallClient struct {
	grpc.ClientStream
}

func (x *proxyHTTPCallClient) Send(m *HTTPRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyHTTPCallClient) Recv() (*HTTPResponse, error) {
	m := new(HTTPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) TCPCall(ctx context.Context, opts ...grpc.CallOption) (Proxy_TCPCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[1], "/api.Proxy/TCPCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyTCPCallClient{stream}
	return x, nil
}

type Proxy_TCPCallClient interface {
	Send(*SockRequest) error
	Recv() (*SockData, error)
	grpc.ClientStream
}

type proxyTCPCallClient struct {
	grpc.ClientStream
}

func (x *proxyTCPCallClient) Send(m *SockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyTCPCallClient) Recv() (*SockData, error) {
	m := new(SockData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyServer is the server API for Proxy service.
// All implementations must embed UnimplementedProxyServer
// for forward compatibility
type ProxyServer interface {
	HTTPCall(Proxy_HTTPCallServer) error
	TCPCall(Proxy_TCPCallServer) error
	mustEmbedUnimplementedProxyServer()
}

// UnimplementedProxyServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (UnimplementedProxyServer) HTTPCall(Proxy_HTTPCallServer) error {
	return status.Errorf(codes.Unimplemented, "method HTTPCall not implemented")
}
func (UnimplementedProxyServer) TCPCall(Proxy_TCPCallServer) error {
	return status.Errorf(codes.Unimplemented, "method TCPCall not implemented")
}
func (UnimplementedProxyServer) mustEmbedUnimplementedProxyServer() {}

// UnsafeProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServer will
// result in compilation errors.
type UnsafeProxyServer interface {
	mustEmbedUnimplementedProxyServer()
}

func RegisterProxyServer(s grpc.ServiceRegistrar, srv ProxyServer) {
	s.RegisterService(&Proxy_ServiceDesc, srv)
}

func _Proxy_HTTPCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).HTTPCall(&proxyHTTPCallServer{stream})
}

type Proxy_HTTPCallServer interface {
	Send(*HTTPResponse) error
	Recv() (*HTTPRequest, error)
	grpc.ServerStream
}

type proxyHTTPCallServer struct {
	grpc.ServerStream
}

func (x *proxyHTTPCallServer) Send(m *HTTPResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyHTTPCallServer) Recv() (*HTTPRequest, error) {
	m := new(HTTPRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Proxy_TCPCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).TCPCall(&proxyTCPCallServer{stream})
}

type Proxy_TCPCallServer interface {
	Send(*SockData) error
	Recv() (*SockRequest, error)
	grpc.ServerStream
}

type proxyTCPCallServer struct {
	grpc.ServerStream
}

func (x *proxyTCPCallServer) Send(m *SockData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyTCPCallServer) Recv() (*SockRequest, error) {
	m := new(SockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Proxy_ServiceDesc is the grpc.ServiceDesc for Proxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HTTPCall",
			Handler:       _Proxy_HTTPCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TCPCall",
			Handler:       _Proxy_TCPCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/api/server.proto",
}
